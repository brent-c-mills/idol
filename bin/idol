#!/bin/bash

set -e;
clear;

#################################
##        DECLARATIONS:        ##
#################################

##--DECLARING FUNCTIONS
check_mode() {
  if [[ ${IDOL_MODE} = "solo" ]]; then
    echo "SOLO MODE";
  elif [[ ${IDOL_MODE} = "client" ]]; then
    echo "CLIENT MODE";
  elif [[ ${IDOL_MODE} = "server" ]]; then
    echo "SERVER MODE";
  else
    echo "ERROR -- INVALID CONFIGURATION";
    echo "INVALID MODE " ${IDOL_MODE};
    exit 1;
  fi
}

create_idol() {
  ${BIN_DIR}/idol_create.sh ${OPERATING_SYSTEM} ${IDOL_NAME} ${CURRENT_LOG} ${BASE_DIR} ${BIN_DIR} ${LIB_DIR} ${TEST_DIR};
}

create_log() {
  touch ${CURRENT_LOG};
}

delete_idol() {
  ${BIN_DIR}/idol_delete.sh ${IDOL_NAME} ${CURRENT_LOG} ${TEST_DIR};
}

fingerprint() {
  if [[ -a /etc/centos-release ]] || [[ -a /etc/redhat-release ]]; then
    echo "Host OS recognized as CentOS / Redhat." | tee -a ${CURRENT_LOG};
    OPERATING_SYSTEM="centos";

  elif [[ -a /etc/os-release ]]; then
    echo "Host OS recognized as Debian / Ubuntu." | tee -a ${CURRENT_LOG};
    OPERATING_SYSTEM="ubuntu";

  elif [[ "$(uname)" -eq "Darwin" ]]; then
    echo "Host OS recognized as Apple OS X." | tee -a ${CURRENT_LOG};
    OPERATING_SYSTEM="darwin";
  else echo "Sorry.  This operating system is not supported at this time." | tee -a ${CURRENT_LOG}; exit 5;
  fi
}

help() {
	${MAN_DIR}/idol_man.sh;
}

import_idol() {
  ${BIN_DIR}/idol_import.sh ${CURRENT_LOG} ${TEST_DIR};
}

list_idol() {
  if [[ ${IDOL_MODE} = "solo" ]] || [[ ${IDOL_MODE} = "server" ]]; then
    ${BIN_DIR}/idol_list.sh ${TEST_DIR};
  elif [[ ${IDOL_MODE} = "client" ]]; then
    scp -r ${SERVER_USERNAME}@${SERVER_URL}:${SERVER_TEST_DIR}/* ${TEST_DIR};
    ${BIN_DIR}/idol_list.sh ${TEST_DIR};
  fi
}

package_idol() {
  ${BIN_DIR}/idol_package.sh ${CURRENT_LOG} ${BASE_DIR} ${TEST_DIR};
}

read_config() {
  source ${CONFIG_FILE};
  check_mode;
}

test_idol() {
	${BIN_DIR}/idol_test.sh ${IDOL_NAME} ${CURRENT_LOG} ${BASE_DIR} ${TEST_DIR};
}

usage() {
  version
  echo "Usage: idol [-hlpv] [-c name] [-t name] [--longoption ...]";
}

version() {
  echo "Idol 1.1.0";
}

#################################
##         READ CONFIG:        ##
#################################
CONFIG_FILE="PLACEHOLD_CONFIG_FILE";
read_config;

#################################
##          SET LOG:           ##
#################################
CURRENT_LOG=${LOG_OUT};

#################################
##        ACCEPT INPUT:        ##
#################################
options=()
arguments=()
for arg in "$@"; do
  if [ "${arg:0:1}" = "-" ]; then
    if [ "${arg:1:1}" = "-" ]; then
      options[${#options[*]}]="${arg:2}";
    else
      index=1;
      while option="${arg:$index:1}"; do
        [ -n "$option" ] || break;
        options[${#options[*]}]="$option";
        let index+=1;
      done
    fi
  else
    arguments[${#arguments[*]}]="$arg";
  fi
done

for option in "${options[@]}"; do
	case "$option" in
	"c" | "create" )
		create_log;
	    IDOL_NAME=$2;
		fingerprint;
		create_idol;
		exit 0;
	    ;;
	"d" | "delete" )
	    create_log;
	    IDOL_NAME=$2;
	    delete_idol;
	    exit 0;
	    ;;
	"h" | "help" )
	    help;
	    exit 0;
	    ;;
	"i" | "import" )
	    create_log;
	    import_idol;
	    exit 0;
	    ;;
    "l" | "list" )
		list_idol;
		exit 0;
		;;
	"p" | "package" )
		create_log;
	    package_idol;
		exit 0;
	    ;;
	"t" | "test" )
		create_log;
    	IDOL_NAME=$2;
		test_idol;
		exit 0;
    	;;
	"v" | "version" )
	    version;
	    exit 0;
	    ;;
	* )
	    usage >&2
	    exit 1;
	    ;;
	esac
done

if [ "${#arguments[@]}" -eq 0 ]; then
  usage >&2
  exit 1;
fi
